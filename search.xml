<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>接口自动化测试：Python+Pytest+Requests+Allure</title>
      <link href="/2022/01/20/jie-kou-ce-shi-zi-dong-hua-python/"/>
      <url>/2022/01/20/jie-kou-ce-shi-zi-dong-hua-python/</url>
      
        <content type="html"><![CDATA[<p>本项目实现了对<a href="https://yuxiaomeng.blog.csdn.net/article/details/122485315">Daily Cost</a>的接口测试：</p><ul><li><strong>Python+Requests</strong> 发送和处理HTTP协议的请求接口</li><li> <strong>Pytest</strong> 作为测试执行器</li><li> <strong>YAML</strong> 管理测试数据</li><li> <strong>Allure</strong> 来生成测试报告。</li></ul><p>本项目是参考了<a href="https://github.com/wintests/pytestDemo">pytestDemo</a>做了自己的实现。</p><h2 id="1-项目结构及安装部署"><a href="#1-项目结构及安装部署" class="headerlink" title="1. 项目结构及安装部署"></a>1. 项目结构及安装部署</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><ul><li><strong>api</strong>:  接口封装层，如封装HTTP接口为Python接口</li><li><strong>commom</strong>:  从文件中读取数据等各种工具类</li><li><strong>core</strong>:  requests 请求方法封装、关键字返回结果类</li><li><strong>config</strong>:  环境、数据库连接等配置</li><li><strong>data</strong>:  测试数据文件管理</li><li><strong>operation</strong>: 关键字封装层，如把多个Python接口封装为关键字</li><li><strong>pytest.ini</strong>:  pytest 配置文件</li><li><strong>requirements.txt</strong>:  相关依赖包文件</li><li><strong>testcases</strong>:  测试用例<ul><li><strong>api_test</strong>:  单接口测试</li><li><strong>scenario_test</strong>:  场景/业务流程测试</li></ul></li></ul><h3 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h3><ul><li>部署Daily Cost应用：教程</li><li>下载本测试项目<a href="https://github.com/yu-xiaomeng/automation-test-for-dailycost/tree/main/apitest-python-pytest-requests">源代码</a> ，通过pip安装相应依赖<code>pip3 install -r requirements.txt</code>，根据实际情况修改setting.ini中的相应内容</li><li>输入<code>pytest</code>运行测试</li><li>如果想要使用Allure查看生成的测试报告，需要先安装Allure服务：<code>brew install allure</code></li></ul><h2 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2. 环境配置"></a>2. 环境配置</h2><ul><li>在config-setting.ini文件中定义<code>api_root_url</code></li><li>在common-read_data.py中实现load_ini()方法读取配置文件</li><li>在需要使用<code>api_root_url</code>的地方调用<code>load_ini(data_file_path)</code>，读取对应的value</li></ul><h2 id="3-封装HTTP请求"><a href="#3-封装HTTP请求" class="headerlink" title="3. 封装HTTP请求"></a>3. 封装HTTP请求</h2><ol><li><p>封装requests请求方法：将<strong>requests</strong>中发送GET、POST、PUT、DELETE等方法封装到<strong>RestClient</strong>类中</p></li><li><p>定义被测API接口Request：在<strong>api</strong>文件夹中根据domain创建对应请求的集合类，如<code>class User(RestClient)</code>，并定义各接口信息，如登录接口：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> self<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="4-关键字封装"><a href="#4-关键字封装" class="headerlink" title="4. 关键字封装"></a>4. 关键字封装</h2><p>关键字应当是具有一定业务意义的。在封装关键字的时候，可以只封装一个接口，也可以调用多个接口来完成。</p><p>比如我们要测试<strong>记一笔</strong>，在接口调用成功后接口只会返回账单的ID，还需要调用查询账单明细接口，来帮助判断每个字段是否与输入时的一致，那么我们可以这样来进行测试：</p><ul><li>首先，将<code>记一笔-查看明细</code>的操作封装为一个关键字，在这个关键字中依次调用记一笔和查询账单明细结果，并可以自定义关键字的返回结果</li><li>接着，在编写测试用例的时候，直接调用关键字来进行测试，这时就可以关键字的返回结果，断言的时候，也可以直接对关键字返回结果进行断言</li></ul><p>再比如<strong>查询月度账单统计结果</strong>，一个接口就可以独立完成业务查询操作，我们在关键字中只调用这一个接口即可。</p><p>回到本项目，具体的代码逻辑如下：</p><ol><li><p>在operation文件夹中，还是按照domain分文件来组织各关键字</p></li><li><p>在core中定义关键字返回的数据结构类 <code>ResultBase</code></p></li><li><p>定义关键字，在调用对应API请求时需要明确传递接口请求参数，并定义返回结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bill_monthly_stat</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">:</span>        header <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>        <span class="token string">"Authorization"</span><span class="token punctuation">:</span> <span class="token string">"Bearer "</span> <span class="token operator">+</span> token    <span class="token punctuation">&#125;</span>    param <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"date"</span><span class="token punctuation">:</span> date<span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> bill_details<span class="token punctuation">.</span>get_bill_monthly<span class="token punctuation">(</span>params<span class="token operator">=</span>param<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span>    <span class="token keyword">return</span> ResultBase<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本项目中的关键字中都只封装了一个请求。</p></li></ol><h2 id="4-单接口测试"><a href="#4-单接口测试" class="headerlink" title="4. 单接口测试"></a>4. 单接口测试</h2><p>以<code>记一笔</code>接口为例。</p><ul><li>定义接口及关键字</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span> api <span class="token operator">-</span><span class="token operator">></span> bill<span class="token punctuation">.</span>py <span class="token punctuation">:</span> 定义接口<span class="token keyword">def</span> <span class="token function">create_new_bill</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/bill"</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token operator">//</span> operation <span class="token operator">-</span><span class="token operator">></span> bill<span class="token punctuation">.</span>py <span class="token punctuation">:</span> 定义关键字<span class="token keyword">def</span> <span class="token function">bill_create</span><span class="token punctuation">(</span>category_id<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">,</span> amount<span class="token punctuation">,</span> note<span class="token punctuation">,</span> date<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"categoryId"</span><span class="token punctuation">:</span> category_id<span class="token punctuation">,</span>        <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">,</span>        <span class="token string">"amount"</span><span class="token punctuation">:</span> amount<span class="token punctuation">,</span>        <span class="token string">"note"</span><span class="token punctuation">:</span> note<span class="token punctuation">,</span>        <span class="token string">"date"</span><span class="token punctuation">:</span> date    <span class="token punctuation">&#125;</span>    header <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>        <span class="token string">"Authorization"</span><span class="token punctuation">:</span> <span class="token string">"Bearer "</span> <span class="token operator">+</span> token    <span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> bill<span class="token punctuation">.</span>create_new_bill<span class="token punctuation">(</span>json<span class="token operator">=</span>payload<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span>        <span class="token keyword">return</span> ResultBase<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>接口测试类</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span> testcases <span class="token operator">-</span><span class="token operator">></span> api_test <span class="token operator">-</span><span class="token operator">></span> bill <span class="token operator">-</span><span class="token operator">></span> test_bill_create<span class="token punctuation">.</span>py<span class="token keyword">class</span> <span class="token class-name">TestBillCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@mark<span class="token punctuation">.</span>smoke</span>    <span class="token decorator annotation punctuation">@mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">'category_id, type, amount, note, date, status_code, message'</span><span class="token punctuation">,</span>                     <span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token string">"5442d3b8-9d4a-4654-bf0b-d2249efef190"</span><span class="token punctuation">,</span> <span class="token string">"EXPENSE"</span><span class="token punctuation">,</span> <span class="token number">100.01</span><span class="token punctuation">,</span> <span class="token string">"note1111test"</span><span class="token punctuation">,</span> <span class="token string">"2021-12-01"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"操作成功"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"66c22fad-be9d-481d-a445-c57d266bf938"</span><span class="token punctuation">,</span> <span class="token string">"INCOME"</span><span class="token punctuation">,</span> <span class="token number">1000.01</span><span class="token punctuation">,</span> <span class="token string">"note1111test"</span><span class="token punctuation">,</span> <span class="token string">"2021-12-01"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"操作成功"</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_bill_create_success</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> category_id<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">,</span> amount<span class="token punctuation">,</span> note<span class="token punctuation">,</span> date<span class="token punctuation">,</span> status_code<span class="token punctuation">,</span> message<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> bill_create<span class="token punctuation">(</span>category_id<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">,</span> amount<span class="token punctuation">,</span> note<span class="token punctuation">,</span> date<span class="token punctuation">,</span> token<span class="token punctuation">)</span>        <span class="token keyword">assert</span> result<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> status_code        <span class="token keyword">assert</span> result<span class="token punctuation">.</span>message <span class="token operator">==</span> message        <span class="token keyword">assert</span> result<span class="token punctuation">.</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>@mark.smoke</code>是使用了pytest的mark标记功能，运行时使用命令<code>pytest -m smoke</code>只运行标记为smoke的用例</li><li><code>@mark.parametrize</code>是pytest的变量参数化功能，可以实现数据驱动测试，如上所示有两条参数化数据，则该用例会应用这两条数据共执行两次</li><li>调用bill_create时有一个<code>token</code>参数，它实际上是在<code>conftest.py</code>文件中定义的</li><li>pytest中的assert使用的是python内置的断言库</li></ul></li></ul><h2 id="5-YAML文件管理测试数据"><a href="#5-YAML文件管理测试数据" class="headerlink" title="5. YAML文件管理测试数据"></a>5. YAML文件管理测试数据</h2><p>在上面的例子中我们在使用<code>@mark.parametrize</code>时直接将具体的测试数据写在了用例上方。为了后期修改维护效率更高，我们通常会将测试数据和用例分离，即可以采用yaml文件来单独管理测试数据，conftest.py可以帮助数据的读取。</p><ul><li><p>定义yaml文件：data -&gt; api_test_data.yml </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">test_bill_create_success</span><span class="token punctuation">:</span>  <span class="token comment"># category_id, type, amount, note, date, status_code, message</span>  <span class="token punctuation">-</span> <span class="token punctuation">[</span><span class="token string">"5442d3b8-9d4a-4654-bf0b-d2249efef190"</span><span class="token punctuation">,</span> <span class="token string">"EXPENSE"</span><span class="token punctuation">,</span> <span class="token number">100.01</span><span class="token punctuation">,</span> <span class="token string">"note1111test"</span><span class="token punctuation">,</span> <span class="token string">"2021-12-01"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"操作成功"</span><span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token punctuation">[</span><span class="token string">"66c22fad-be9d-481d-a445-c57d266bf938"</span><span class="token punctuation">,</span> <span class="token string">"INCOME"</span><span class="token punctuation">,</span> <span class="token number">1000.01</span><span class="token punctuation">,</span> <span class="token string">"note1111test"</span><span class="token punctuation">,</span> <span class="token string">"2021-12-01"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"操作成功"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>key</code>为测试用例对应的函数名<code>test_bill_create_success</code></li><li> <code>-</code>表示value是数组</li></ul></li><li><p><code>conftest.py</code>中读取对应的测试数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token keyword">import</span> os<span class="token keyword">from</span> common<span class="token punctuation">.</span>read_data <span class="token keyword">import</span> data BASE_PATH <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span>yaml_file_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        data_file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_PATH<span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">,</span> yaml_file_name<span class="token punctuation">)</span>        yaml_data <span class="token operator">=</span> data<span class="token punctuation">.</span>load_yaml<span class="token punctuation">(</span>data_file_path<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> ex<span class="token punctuation">:</span>        pytest<span class="token punctuation">.</span>skip<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> yaml_dataapi_data <span class="token operator">=</span> get_data<span class="token punctuation">(</span><span class="token string">"api_test_data.yml"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>参数化时从yaml文件中读取数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">'category_id, type, amount, note, date, status_code, message'</span><span class="token punctuation">,</span>                     api_data<span class="token punctuation">[</span><span class="token string">"test_bill_create_success"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="6-API场景测试"><a href="#6-API场景测试" class="headerlink" title="6. API场景测试"></a>6. API场景测试</h2><p>在做API测试时，除了单个接口输入输出的校验，由多个接口串联成的业务场景的测试也是必不可少的。</p><p>简单的，我们以登录后进入首页为例，接口调用为：登录 -&gt; 查询当月账单明细列表 -&gt; 查询当月账单统计值。</p><ul><li><p>定义场景测试类</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span> testcases <span class="token operator">-</span><span class="token operator">></span> scenario_test <span class="token operator">-</span><span class="token operator">></span> test_get_one_month_bill<span class="token punctuation">.</span>py<span class="token keyword">import</span> allure<span class="token keyword">import</span> pytest<span class="token keyword">from</span> operation<span class="token punctuation">.</span>user <span class="token keyword">import</span> login_user<span class="token keyword">from</span> operation<span class="token punctuation">.</span>bill <span class="token keyword">import</span> one_month_bill_list_get_by_date<span class="token punctuation">,</span> bill_monthly_stat<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>core</span><span class="token keyword">class</span> <span class="token class-name">TestGetOneMonthBill</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>title</span><span class="token punctuation">(</span><span class="token string">"01: user[yuxiaomeng] login"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>story</span><span class="token punctuation">(</span><span class="token string">'story_1'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_user_login</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> core_env<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> login_user<span class="token punctuation">(</span><span class="token string">'yuxiaomeng'</span><span class="token punctuation">,</span> <span class="token string">'20211030.y'</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> result<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span>        <span class="token keyword">assert</span> result<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token string">"token"</span><span class="token punctuation">]</span>        core_env<span class="token punctuation">[</span><span class="token string">"token"</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token string">"token"</span><span class="token punctuation">]</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>title</span><span class="token punctuation">(</span><span class="token string">"02: get homepage info - bill details list"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>story</span><span class="token punctuation">(</span><span class="token string">'story_1'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_get_current_month_monthly_bill_list</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> core_env<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> one_month_bill_list_get_by_date<span class="token punctuation">(</span>core_env<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> core_env<span class="token punctuation">[</span><span class="token string">"token"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> result<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span>        <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span>        <span class="token keyword">assert</span> result<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"2021-11-11"</span>        <span class="token keyword">assert</span> result<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"expense"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">510.5</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>title</span><span class="token punctuation">(</span><span class="token string">"03: get homepage info - bill monthly statistics "</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>story</span><span class="token punctuation">(</span><span class="token string">'story_1'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_get_current_month_bill</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> core_env<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> bill_monthly_stat<span class="token punctuation">(</span>core_env<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> core_env<span class="token punctuation">[</span><span class="token string">"token"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> result<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span>        <span class="token keyword">assert</span> result<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token string">"expense"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>其中<code>core_env</code>用于在接口间传递测试数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span> testcases <span class="token operator">-</span><span class="token operator">></span> scenario_test <span class="token operator">-</span><span class="token operator">></span> conftest<span class="token punctuation">.</span>py<span class="token keyword">import</span> pytest<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">'session'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">core_env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"date"</span><span class="token punctuation">:</span> <span class="token string">"2021-11"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="7-Allure生成测试报告"><a href="#7-Allure生成测试报告" class="headerlink" title="7. Allure生成测试报告"></a>7. Allure生成测试报告</h2><p>allure-pytest的详细使用方法可以参考<a href="https://docs.qameta.io/allure-report/frameworks/python/pytest">官方文档</a>。在这里只做简单介绍。</p><ul><li>运行测试时加上–alluredir参数可以生存报告到指定的文件夹:<code> pytest --alluredir=/tmp/my_allure_results</code></li><li>运行完后查看报告：<code>allure serve /tmp/my_allure_results</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 接口测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API TEST </tag>
            
            <tag> Python </tag>
            
            <tag> Pytest </tag>
            
            <tag> Allure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Daily Cost 介绍</title>
      <link href="/2022/01/13/daily-cost-jie-shao/"/>
      <url>/2022/01/13/daily-cost-jie-shao/</url>
      
        <content type="html"><![CDATA[<p><strong>Daily Cost</strong>是我为了学习前后端开发的产出成果。从应用名可以看出是一个记账本应用，主要参考了<a href="https://www.shayujizhang.com/">鲨鱼记账</a>，我从中挑选了一部分核心功能来自己开发实现。</p><h2 id="1-功能模块"><a href="#1-功能模块" class="headerlink" title="1. 功能模块"></a>1. 功能模块</h2><p>作为一个正经的记账本应用，肯定要能满足用户的基本记账需求，因此Daily Cost 实现了以下功能：</p><ol><li>用户注册和登录</li><li>用户可管理自己的记账类别</li><li>用户可新增、查看、编辑、删除一笔账单</li><li>用户可按月、按年查看总的收支数据</li></ol><p><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20220113165520167.png" alt="image-20220113165520167"></p><p>说明：由于我水平和精力有限，部分功能未完全开发完成，具体如下所示。灰掉的部分功能后端接口已开发完成，但前端UI未完全开发完成，后续开发完成后会更新下图，大家也可在<a href="https://trello.com/b/AYAxICxo/%E8%AE%B0%E8%B4%A6%E6%9C%AC-daily-cost">记账本-Daily Cost</a>中查看最新进度。</p><div  align="center"><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20220113175321025.png" alt="image-20220113175321025" style="zoom: 33%;" /></div><h2 id="2-技术栈"><a href="#2-技术栈" class="headerlink" title="2. 技术栈"></a>2. 技术栈</h2><p>2.1  前端主要依赖模块</p><ul><li><a href="https://reactjs.org/">react</a>(前端框架，daily cost使用<a href="https://create-react-app.dev/">create-react-app</a>创建)</li><li><a href="https://github.com/remix-run/react-router/blob/main/docs/getting-started/tutorial.md">react-router-dom</a>(路由控制)</li><li><a href="https://ant.design/index-cn">antd</a>(蚂蚁金服开源的 react ui 组件框架)</li><li><a href="https://mobile.ant.design/zh">antd-mobile</a>(antd的移动端组件框架)</li><li><a href="https://github.com/mzabriskie/axios">axios</a>(http请求模块)</li></ul><p>2.2 后端</p><ul><li><a href="https://spring.io/projects/spring-boot">Spring Boot 2</a></li><li><a href="https://spring.io/projects/spring-security">Spring Security</a>(身份验证和访问控制)</li><li><a href="https://maven.apache.org/">maven</a>(项目构建)</li><li><a href="https://swagger.io/">Swagger 3</a>(接口文档)</li><li><a href="https://flywaydb.org/">Flyway</a>(数据库版本控制工具)</li><li><a href="https://www.mysql.com/">MySQL</a>(数据库)</li><li><a href="https://www.nginx.com/">Nginx</a>(解决请求跨域问题)</li></ul><h2 id="3-安装和运行"><a href="#3-安装和运行" class="headerlink" title="3. 安装和运行"></a>3. 安装和运行</h2><p>3.1 前端</p><ol><li><p>下载或克隆<a href="https://github.com/yu-xiaomeng/dailycost-front">项目前端源码</a></p></li><li><p><code>npm install </code> 安装依赖</p></li><li><p><code>npm start</code> 启动项目</p></li></ol><p>3.2 后端</p><ol><li>下载并安装<a href="https://www.java.com/zh-CN/download/">Java</a>、<a href="https://www.mysql.com/">MySQL</a>、<a href="https://www.jetbrains.com/idea/download/">Intellij IDEA</a></li><li>下载或克隆<a href="https://github.com/yu-xiaomeng/dailycost">项目后端源码</a></li><li>在IDEA中打开项目，等待maven下载所有依赖</li><li>在application.properties中修改MySQL数据库配置（连接url、用户名、密码）</li><li><code>./mvnw spring-boot:run</code>构建并运行daily cost应用</li><li>应用在8081端口运行成功：<ol><li>可在浏览器中输入<code>http://localhost:8081/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config#/</code>查看和调试接口</li><li>检查MySQL数据库，数据表及数据初始化成功</li></ol></li></ol><p>3.3 Nginx</p><ol><li><p>安装Nginx</p></li><li><p>修改Nginx的配置文件nginx.conf，Mac OS该文件目录为<code>/usr/local/etc/nginx/nginx.conf</code></p><pre class="line-numbers language-none"><code class="language-none">server &#123;listen       8080;server_name  localhost;# 以下为需要新增的内容location &#x2F;api&#x2F; &#123;proxy_pass http:&#x2F;&#x2F;127.0.0.1:8081&#x2F;;&#125;location &#x2F; &#123;proxy_pass http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;;&#125;# 新增结束# 原本的内容无需更改&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>nginx -s reload</code>重新启动Nginx</p></li></ol><p>3.4 访问页面</p><p>​    在浏览器中输入<a href="http://localhost:8080/%EF%BC%8C%E8%83%BD%E5%A4%9F%E7%9C%8B%E5%88%B0%E4%BB%A5%E4%B8%8B%E9%A1%B5%E9%9D%A2%E5%88%99%E8%AF%81%E6%98%8E%E8%BF%90%E8%A1%8C%E6%88%90%E5%8A%9F%E3%80%82%E4%B8%8B%E5%9B%BE%E4%B8%AD%E6%88%91%E6%89%93%E5%BC%80%E4%BA%86%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%B9%B6%E5%B0%86%E5%A4%A7%E5%B0%8F%E8%AE%BE%E4%B8%BA375%E2%9C%96%EF%B8%8F">http://localhost:8080/，能够看到以下页面则证明运行成功。下图中我打开了移动端模式，并将大小设为375✖️</a> 812的最佳使用大小。</p><div  align="center"><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20220113230947432.png" alt="image-20220113230947432" style="zoom:30%;" /></div>]]></content>
      
      
      <categories>
          
          <category> Daily Cost </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily Cost </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TED 内向性格的力量</title>
      <link href="/2020/01/03/ted-nei-xiang-xing-ge-de-li-liang/"/>
      <url>/2020/01/03/ted-nei-xiang-xing-ge-de-li-liang/</url>
      
        <content type="html"><![CDATA[<p>I hope you will open up your suitcases for other people to see, because the world needs you and it needs the things you carry.</p><span id="more"></span><div style="max-width:854px"><div style="position:relative;height:0;padding-bottom:56.25%"><iframe src="https://embed.ted.com/talks/lang/zh-cn/susan_cain_the_power_of_introverts" width="854" height="480" style="position:absolute;left:0;top:0;width:100%;height:100%" frameborder="0" scrolling="no" allowfullscreen></iframe></div></div></br></br><p>So I just published a book about introversion, and it took me about seven years to write. And for me, that seven years was like total bliss, because I was reading, I was writing, I was thinking, I was researching. It was my version of my grandfather’s hours of the day alone in his library. But now all of a sudden my job is very different, and my job is to be out here talking about it, talking about introversion. </p><p>And that’s a lot harder for me, because as honored as I am to be here with all of you right now, this is not my natural milieu. </p><p>So I prepared for moments like these as best I could. I spent the last year practicing public speaking every chance I could get. And I call this my “year of speaking dangerously.” </p><p>And that actually helped a lot. But I’ll tell you, what helps even more is my sense, my belief, my hope that when it comes to our attitudes to introversion and to quiet and to solitude, we truly are poised on the brink on dramatic change. I mean, we are. And so I am going to leave you now with three calls for action for those who share this vision. </p><p><strong>Number one: Stop the madness for constant group work. Just stop it.</strong></p><p>And I want to be clear about what I’m saying, because I deeply believe our offices should be encouraging casual, chatty cafe-style types of interactions – you know, the kind where people come together and serendipitously have an exchange of ideas. That is great. It’s great for introverts and it’s great for extroverts. But we need much more privacy and much more freedom and much more autonomy at work. School, same thing. We need to be teaching kids to work together, for sure, but we also need to be teaching them how to work on their own. This is especially important for extroverted children too. They need to work on their own because that is where deep thought comes from in part. </p><p>Okay, <strong>number two: Go to the wilderness.</strong> Be like Buddha, have your own revelations. I’m not saying that we all have to now go off and build our own cabins in the woods and never talk to each other again, but I am saying that we could all stand to unplug and get inside our own heads a little more often. </p><p><strong>Number three: Take a good look at what’s inside your own suitcase and why you put it there.</strong> So extroverts, maybe your suitcases are also full of books. Or maybe they’re full of champagne glasses or skydiving equipment. Whatever it is, I hope you take these things out every chance you get and grace us with your energy and your joy. But introverts, you being you, you probably have the impulse to guard very carefully what’s inside your own suitcase. And that’s okay. <strong>But occasionally, just occasionally, I hope you will open up your suitcases for other people to see, because the world needs you and it needs the things you carry.</strong></p><p>So I wish you the best of all possible journeys and the courage to speak softly. </p>]]></content>
      
      
      <categories>
          
          <category> TED </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Coursera视频无法观看的解决方法(亲测有效)</title>
      <link href="/2018/11/11/coursera-shi-pin-wu-fa-guan-kan-de-jie-jue-fang-fa-qin-ce-you-xiao/"/>
      <url>/2018/11/11/coursera-shi-pin-wu-fa-guan-kan-de-jie-jue-fang-fa-qin-ce-you-xiao/</url>
      
        <content type="html"><![CDATA[<p>你最近是否也会遇到Coursera中的视频打不开的情况？</p><p>该怎么解决呢？</p><span id="more"></span><p>今天满怀斗志地打开Coursera，登录账号，打开许久没有学习的Algorithms, PART 1，却发现，emmm，视频怎么放不出来呢？</p><p>怎么办？今儿还能愉快得学习了吗？</p><p>我这股学习的热情不能就这么就被浇灭了！Google一下吧。</p><p>以下是解决办法的记录。</p><p>首先怀疑的就是网络的问题，<a href="https://www.coursera.org/">https://www.coursera.org/</a> 虽然可以直接访问，但是coursera的视频是放在AWS的CDN上进行全球分发的，由于CDN域名解析的问题，导致在天朝没法观看。比较有效的方法就是修改本机的hosts文件。</p><p>下面给出windows和Ubuntu下的具体操作</p><h2 id="1-win解决办法"><a href="#1-win解决办法" class="headerlink" title="1. win解决办法"></a>1. win解决办法</h2><ol><li><p>以管理员权限打开notepad++或记事本<br>在notepad++上右键，选择以管理员权限打开</p></li><li><p>在notepad++中打开hosts文件<br>win10下hosts文件路径为：C:\Windows\System32\drivers\etc\hosts</p></li><li><p>在文件后面追加IP和域名<br>52.84.246.90    <a href="http://d3c33hcgiwev3.cloudfront.net/">d3c33hcgiwev3.cloudfront.net</a><br>52.84.246.252    <a href="http://d3c33hcgiwev3.cloudfront.net/">d3c33hcgiwev3.cloudfront.net</a><br>52.84.246.144    <a href="http://d3c33hcgiwev3.cloudfront.net/">d3c33hcgiwev3.cloudfront.net</a><br>52.84.246.72    <a href="http://d3c33hcgiwev3.cloudfront.net/">d3c33hcgiwev3.cloudfront.net</a><br>52.84.246.106    <a href="http://d3c33hcgiwev3.cloudfront.net/">d3c33hcgiwev3.cloudfront.net</a><br>52.84.246.135    <a href="http://d3c33hcgiwev3.cloudfront.net/">d3c33hcgiwev3.cloudfront.net</a><br>52.84.246.114    <a href="http://d3c33hcgiwev3.cloudfront.net/">d3c33hcgiwev3.cloudfront.net</a><br>52.84.246.90    <a href="http://d3c33hcgiwev3.cloudfront.net/">d3c33hcgiwev3.cloudfront.net</a><br>52.84.246.227    <a href="http://d3c33hcgiwev3.cloudfront.net/">d3c33hcgiwev3.cloudfront.net</a></p></li><li><p>刷新DNS<br>WIN+R搜索cmd，输入命令ipconfig/flushdns</p></li><li><p>看，视频出来了</p></li></ol><p><img src="https://mubu.com/document_image/30cfbec7-22b6-400f-9219-4984d4f1f574-985409.jpg" alt="img"></p><h2 id="2-Ubuntu解决办法-修改hosts文件"><a href="#2-Ubuntu解决办法-修改hosts文件" class="headerlink" title="2. Ubuntu解决办法-修改hosts文件"></a>2. Ubuntu解决办法-修改hosts文件</h2><ul><li><p>编辑hosts文件<br>sudo vim /etc/hosts<br>在文件后面追加IP和域名，与win下的相同</p></li><li><p>刷新DNS<br>sudo /etc/init.d/dns-clean</p></li></ul><p>当然了，有钱的大佬们不需要这么麻烦，买一个VPN就可以了。这里我友情推荐一下蓝灯，有时候还是蛮好用的。戳链接直达 <a href="https://github.com/getlantern/lantern">https://github.com/getlantern/lantern</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> coursera </tag>
            
            <tag> dns </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
