<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>服务端接口测试-单接口测试点</title>
      <link href="/2022/01/21/fu-wu-duan-jie-kou-ce-shi-dan-jie-kou-ce-shi-dian/"/>
      <url>/2022/01/21/fu-wu-duan-jie-kou-ce-shi-dan-jie-kou-ce-shi-dian/</url>
      
        <content type="html"><![CDATA[<p>接口测试与系统功能测试的关注点没有太多不同，只是我们直接面对的测试对象由页面变成了接口。</p><p>本文以HTTP(S)协议接口为例，归纳总结了单接口测试时的测试点。</p><h2 id="1-什么是接口"><a href="#1-什么是接口" class="headerlink" title="1. 什么是接口"></a>1. 什么是接口</h2><blockquote><p><em>API（Application Programming Interface,<a href="https://link.zhihu.com/?target=http://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F">应用程序</a>编程接口）是一些预先定义的<a href="https://link.zhihu.com/?target=http://baike.baidu.com/item/%E5%87%BD%E6%95%B0">函数</a>，目的是提供<a href="https://link.zhihu.com/?target=http://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F">应用程序</a>与开发人员基于某<a href="https://link.zhihu.com/?target=http://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6">软件</a>或硬件得以访问一组<a href="https://link.zhihu.com/?target=http://baike.baidu.com/item/%E4%BE%8B%E7%A8%8B">例程</a>的能力，而又无需访问源码，或理解内部工作<a href="https://link.zhihu.com/?target=http://baike.baidu.com/item/%E6%9C%BA%E5%88%B6">机制</a>的细节。</em></p></blockquote><p>当我们想学习如何做接口测试时，来到CSDN或其他技术平台，在搜索框内输入关键字“接口测试”，点击搜索，等待1-2秒后，就能看到页面展示了相关的搜索结果。在这个过程中我们按F12打开开发者工具，切换到network，可以看到，在点击搜索后，前端页面根据我们输入的关键词向后端服务器发送了一个请求（request），服务端收到请求并处理完成后返回相应结果（response）。</p><p><img src="/Users/mengling.yu/Library/Mobile%20Documents/com~apple~CloudDocs/my_notes/assets/image-20210818180445251.png" alt="image-20210818180445251"></p><p>由于用户可能绕过前端页面的逻辑，直接调用接口，因此需要考虑直接调用接口进行测试，确定接口是否能在功能、可靠性、性能和安全方面达到预期。从功能测试的角度来看，我们需要关注输入关键词和输出结果数据，接口测试在这方面的关注点也基本是一样的。</p><h2 id="2-输入参数和输出结果"><a href="#2-输入参数和输出结果" class="headerlink" title="2. 输入参数和输出结果"></a>2. 输入参数和输出结果</h2><p>在记账本中，用户在下面的页面上选择、填入必要信息后，点击完成，会调用接口新增一条支出记录。</p><p><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20210820215052023.png" alt="image-20210820215052023"></p><p>可以看到，输入参数共有6个，接口测试时需要对这六个输入参数进行测试：</p><ul><li><code>amount</code>参数值数值类型，那么根据等价类和边界值方法，需要根据需求验证数值大小范围，小数及其位数，负数，其他非法字符类型；</li><li><code>date</code>为字符串类型，但表示的是日期，用户在前端页面选择日期，日期的格式也有前端逻辑完成，但直接调用接口时，同样需要验证日期格式：合法的日期，不合法的日期如2021-13-01，其他字符类型；</li><li><code>category</code>表示支出/收入的类别，表面看是字符串类型的，但结合功能逻辑，该参数只能接收枚举值，即用户配置过的类别中的其中一个，这种枚举值参数需要遍历所有合法的枚举值，再验证任意不在枚举值内的其他值；</li><li><code>type</code>和<code>category</code>一样，也是枚举值类型，只能是”EXPENSE”和 “INCOME”；</li><li>在这里还有很重要的一点要注意，<code>category</code>和<code>type</code>实际上是存在对应关系的，比如早餐这一类别只在支出中设置了，当我们传参为<code>&#123;&quot;category&quot;: &quot;breakfast&quot;, &quot;type&quot;: &quot;INCOME&quot;&#125;</code>时，预期是不能成功创建的，即对于组合参数，需要验证参数的组合方式；</li><li><code>img_id</code>为数组类型，业务上来说数组内元素代表上传图片的id，id为字符串类型，需要验证元素总个数：空数组、有效个元素、超出有效范围的个数，数组内单个元素即id有效性验证：有效的图片id、无效的图片id、空字符串等，还有数组内元素重复；</li><li><code>note</code>为字符串类型，为该账单的备注，需要验证字符串中的字符类型：中文、英文、特殊字符如空格！@%*和emoji等，还有字符串长度，如果该内容是用户评论、用户名、UGC文章内容等，通常还需要验证是否有做<a href="https://cloud.baidu.com/doc/ANTIPORN/s/Vk3h6xaga">敏感词</a>过滤；</li><li>根据需求，金额、日期、分类和类型是必填项，图片和备注是选填项，在测试时也需要覆盖到这一点。</li></ul><p>除了输入参数，输出结果也是需要测试的：</p><ul><li>最重要的一点当然是当我使用正确的参数发请求后，能够收到正确的响应：返回码为200，返回json中各值均正确；</li><li>当传入不合法的参数时，对于所有可能出现的业务错误，code和message都能对应给到清晰明确的提示，让用户知道自己哪里操作有误；</li><li>由于其他原因导致服务器无法正确响应时，也应返回统一的错误码提示用户；</li><li>有些任务处理要花费很长时间，这就会导致接口超时，接口超时后前端不应再接收返回响应。</li></ul><p>其他叮嘱：</p><ul><li>分页接口中pageSize参数也应当设计成枚举类型，比如前端只能切换为10/20/50条每页，那么如果我们pageSize传参为100，接口报错，而不应该返回100条数据</li><li>接口在不应该暴露任何后端接口名称、不打印堆栈等信息</li></ul><h2 id="3-业务逻辑"><a href="#3-业务逻辑" class="headerlink" title="3. 业务逻辑"></a>3. 业务逻辑</h2><h3 id="约束条件"><a href="#约束条件" class="headerlink" title="约束条件"></a>约束条件</h3><p>约束条件的测试在功能测试中经常遇到，在接口测试中更为重要。它的意义在于：用户进行操作时，在该操作的前端可以已经进行了约束条件的限制，故用户无法直接触发请求该接口。但是实际上，如果有其他手段：例如 UI 有 bug 或者通过技术手段直接调用接口，那么接口是否针对这些条件进行了限制就更为重要。</p><p><strong><a href="https://testerhome.com/topics/9265">一个案例</a></strong></p><p>某公司发现，价值 100 元的商品，在该公司网上商城被以 0.01 元买走了很多。攻城狮们火速定位，问题原因很快被找到了，原来是购买商品接口的 bug。该接口需要 3 个参数：商品 id、商品单价、购买数量，而服务器根据接口传过来的商品单价（0.01 元）生成了订单。服务器本应根据数据库中的商品单价 100 元来生成订单。我们将单价修改后，再购买，提交到服务器的商品单价就是 0.01 元。这个接口在设计阶段就已经存在问题，正确应该是后台程序根据传入的商品id，查询到对应商品的价格，而不应该直接使用接口传入的价格。</p><p>业务功能中最常见的约束条件主要有数值限制、状态限制、关系限制和权限限制，以在购物网站下单时使用优惠券为例：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"product_id"</span><span class="token operator">:</span> <span class="token string">"12345678890644"</span><span class="token punctuation">,</span><span class="token property">"count"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token property">"coupon_id"</span><span class="token operator">:</span> <span class="token string">"thisiscouponid"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>数值限制</strong></p><ul><li>用户购买的商品只有在<strong>订单总金额达到300</strong>时才可使用该优惠券下单成功</li><li>订单中商品库存大于等于2时才可以下单成功</li></ul></li><li><p><strong>状态限制</strong></p><ul><li>只能使用在有效期内的优惠券（同时也是时间限制）</li><li>只能使用未使用状态的优惠券</li></ul></li><li><p><strong>关系限制</strong></p><ul><li>只能使用与当前用户账号绑定的优惠券</li></ul><p>在上面的接口参数中，我们其实并没有传入用户ID等内容，用户的身份鉴别通常是通过headers中的Token等实现的。</p></li></ul><h3 id="权限限制"><a href="#权限限制" class="headerlink" title="权限限制"></a>权限限制</h3><p><strong>权限限制</strong>我需要单独拎出来讲，它很重要！</p><p>很多系统中都存在系统管理员、普通用户等不同角色的用户，系统管理员拥有一些普通用户没有的权限，比如系统管理员可以发布公告，而普通用户则只能查看，系统管理员和用户还有组织上的划分，比如深圳市的系统管理员和普通用户，广东省的管理员和普通用户。</p><p><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20210820221352559.png" alt="image-20210820221352559"></p><p>就用户角色而言，需要验证低等级用户拥有管理员权限等高于自身级别访问能力，即纵向越权；就用户组织维度来看，需要验证相同组织/不同组织间，是否能访问到不属于自己权限内的资源，即横向越权。</p><h3 id="状态转换"><a href="#状态转换" class="headerlink" title="状态转换"></a>状态转换</h3><p>很多被测逻辑可以抽象成状态机，各个状态之间根据功能逻辑，能够从一个状态转换到另一个状态。如果我们打乱了这个次序，从一个状态切换到另一个不在它下一状态集中的状态，那么逻辑将会打乱，就会出现逻辑问题。以一个二级审核功能为例，某UGC平台内，用户提交了一篇文章，要先经过初审，初审通过后才能再进行复审，即两轮审核都通过时，文章才能发布出来。</p><p><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20210820222256978.png" alt="image-20210820222256978"></p><p>针对这种状态转换的逻辑，我们需要验证：</p><ul><li>正常的状态切换：用户提交 -&gt; 初审通过 -&gt; 复审通过 -&gt; 文章发布成功</li><li>非正常的状态切换：<ul><li>用户提交 -&gt; 初审驳回 -&gt; 复审通过</li><li>用户提交 -&gt; 复审通过</li></ul></li></ul><h2 id="4-幂等性"><a href="#4-幂等性" class="headerlink" title="4. 幂等性"></a>4. 幂等性</h2><blockquote><p>一个HTTP方法是幂等的，指的是同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。换句话说就是，幂等方法不应该具有副作用（统计用途除外）。在正确实现的条件下，GET，HEAD，PUT和DELETE 等方法都是幂等的，而 POST 方法不是。</p></blockquote><p>举个最简单的<a href="https://zhuanlan.zhihu.com/p/271722169">例子</a>，那就是支付，用户购买商品后支付，支付扣款成功，但是返回结果的时候网络异常，此时钱已经扣了，用户再次点击按钮，此时会进行第二次扣款，返回结果成功，用户查询余额返发现多扣钱了，流水记录也变成了两条，这就没有保证接口的幂等性、只要调用接口成功，外部对接口的多次调用得到的结果是相同的，即执行多次和一次的效果是一样的，用户在后续再支付时，不会重复扣款。</p><p>接口幂等性测试，需要测试人员在需求分析的时候，就能识别出需要实现幂等的接口，并提前要求开发同学去实现。</p><h2 id="5-文件上传-下载接口"><a href="#5-文件上传-下载接口" class="headerlink" title="5. 文件上传/下载接口"></a>5. 文件上传/下载接口</h2><p>文件的上传下载也是很多产品里会有的功能了。在测试文件上传/下载接口基本功能时，主要还是从文件本身的属性来考虑，即文件名称、文件类型、文件大小、文件内容/规格。</p><ul><li>文件上传<ul><li>文件名称：文件名的字符串长度；文件名中的特殊字符如空格、@#¥%-等</li><li>文件类型：验证文件后缀名，保证使用的是白名单</li><li>文件大小校验：上传文件请求头等也有大小，必须校验的是文件本身的大小</li><li>文件内容/规格校验：若上传的文件需要后台解析其内容，当然也需要测试填入不同内容；规格主要指图片/视频的尺寸和时长等限制</li><li>文件上传成功后服务器保存的文件与上传的文件内容一致</li></ul></li><li>文件下载<ul><li>文件本身：验证下载的文件的文件名；下来的文件可以正常打开并查看，内容与上传时的一致/内容正确</li><li>文件下载链接敏感文件内容使用一次性下载链接/短时间内有效下载链接（如身份证图片）</li></ul></li></ul><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%9A%84%E6%B5%8B%E8%AF%95%E7%82%B9.png" alt="接口测试的测试点-总结"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="https://testerhome.com/topics/11677">腾讯 TMQ 接口测试用例设计</a></li><li><a href="https://zhuanlan.zhihu.com/p/271722169">测试同学必会系列之如何进行幂等性的测试</a></li><li><a href="https://testerhome.com/topics/29928">服务端接口测试指南</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 接口测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API TEST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postman教程-导入请求的多种方式</title>
      <link href="/2022/01/20/postman-jiao-cheng-dao-ru-qing-qiu-de-duo-chong-fang-shi/"/>
      <url>/2022/01/20/postman-jiao-cheng-dao-ru-qing-qiu-de-duo-chong-fang-shi/</url>
      
        <content type="html"><![CDATA[<p>Postman是一个有着图形化界面的API请求模拟平台，在构造请求时最常见的莫过于手动在对应的输入框中填入相应的内容：</p><p>根据被测HTTP请求的Method、URL、Headers、Request Params/Body，填写完成后点击Send，能够看到响应返回的Status、Headers、Boby等相应信息。为了方便下次使用，我们通常也会将其保存到Collection中。</p><p><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20220107141525751.png" alt="image-20220107141525751"></p><p>当需要测试的接口不多时，重复这样操作看起来问题不大，但通常一个系统的接口至少是有几十上百个的，再这样一个一个手动输入的话，效率未免太低。<br>postman提供了多种方法帮助我们批量导入，点击import，我们可以看到有File、Folder、Link、Raw text、Code repository这5种导入方法，本人根据自己在工作中的经验和使用习惯，将依次介绍其中的Raw text、File、Link这3种方法。</p><p><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20220107144841882.png" alt="postman-import-import"><br>除了Import外，Postman还可以拦截请求并将请求信息存储到对应的位置，使用过Fiddler、Charles等抓包工具的同学应该会比较熟悉这个操作，这种方法与页面操作紧密结合，也是非常不错的批量导入请求的方法。</p><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20220109224816557.png" alt="image-20220109224816557" style="zoom:35%;" /><h3 id="1-Raw-text-粘贴curl命令"><a href="#1-Raw-text-粘贴curl命令" class="headerlink" title="1. Raw text - 粘贴curl命令"></a>1. Raw text - 粘贴curl命令</h3><p><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20220110195204223.png" alt="postman-import-rawtext01"></p><p>从上图的示例中我们看到，可以直接输入<a href="https://so.csdn.net/so/search?q=curl&t=&u=">curl命令</a>，不太了解curl命令的同学可能会觉得，“这不是把事情搞得更复杂了吗？”不是的，我们在Developer Tools中有一种很快捷的方式获得接口的curl命令形式的文本：</p><p>在操作应用的前端页面时，按下F12，打开Developer Tools，我们能看到相应的接口请求信息，右键点击该请求，选择Copy -&gt; Copy as cURL， 然后粘贴到Import -&gt; Raw Text中，点击Continue -&gt; Import，就能看到Requests的相应信息都自动填写好了。</p><p><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20220107153431159.png" alt="postman-import-rawtext02"></p><p><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20220107153542798.png" alt="postman-import-rawtext03"></p><p><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20220107153648600.png" alt="postman-import-rawtext04"></p><h2 id="2-Link-通过Swagger导入"><a href="#2-Link-通过Swagger导入" class="headerlink" title="2. Link - 通过Swagger导入"></a>2. Link - 通过Swagger导入</h2><p><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20220110195504729.png" alt="postman-import-link01"></p><p>当项目使用Swagger 3.0 作为API文档工具时，我们可以直接在”Link”中填入api-docs的请求链接<code>http://localhost:8081/v3/api-docs</code>，获取方式如下图所示。</p><p><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20220107150132216.png" alt="postman-import-link02"></p><p>填写完成后点击Continue -&gt; Import，导入成功后可以在Collection中看到所有的API请求，可以看到请求Method、URL、Body的参数都不需要我们再手动填写了。注意这里的URL中出现了<code>&#123;&#123;baseUrl&#125;&#125;</code>，这个是postman中非常好用的变量（Environment）功能，将在后面的文章中详细介绍其使用方法。</p><p><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20220107150536072.png" alt="postman-import-link03"></p><h2 id="3-File-导入Postman-json文件"><a href="#3-File-导入Postman-json文件" class="headerlink" title="3. File - 导入Postman json文件"></a>3. File - 导入Postman json文件</h2><p>首先，对于已经保存在Collection中的多个请求，我们可以先使用“导出”功能将所有请求导出到json文件中。</p><p><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20220110200120151.png" alt="image-20220110200120151"></p><p>json文件导出成功后，直接将对应的文件发送给团队内的其他同学或者一起放入代码仓库中，团队内其他人下载后再使用导入文件的功能，将其导入postman即可开始使用。</p><p><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20220110195742980.png" alt="image-20220110195742980"></p><h2 id="4-拦截请求"><a href="#4-拦截请求" class="headerlink" title="4. 拦截请求"></a>4. 拦截请求</h2><p>使用过Fiddler、Charles等抓包工具的小伙伴应该对拦截请求的原理及相应操作十分了解了。Postman现在提供了两种拦截请求的方法，我们可以拦截请求并将其存储到collection中。</p><h3 id="4-1-Postman-Interceptor"><a href="#4-1-Postman-Interceptor" class="headerlink" title="4.1 Postman Interceptor"></a>4.1 Postman Interceptor</h3><p>先在浏览器中安装<a href="https://chrome.google.com/webstore/detail/postman-interceptor/aicmkgpgakddgnaphhhpliifpcfhicfo">Postman Interceptor</a>，Postman中也要安装Interceptor Bridge，准备就绪后，可以看到<code>CONNECTED</code>状态，Postman就可以将符合过滤条件的请求拦截并存储在设定好的collection中。</p><p><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20220110200256133.png" alt="image-20220110200256133"></p><p>在浏览器插件中也可以看到相应请求信息：</p><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20220107163351690.png" alt="image-20220107163351690" style="zoom:33%;" /><p>Postman中相应请求也被保存下来了：</p><p><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20220107163052735.png" alt="image-20220107163052735"></p><h3 id="4-2-Proxy"><a href="#4-2-Proxy" class="headerlink" title="4.2 Proxy"></a>4.2 Proxy</h3><p>如果只需要抓取HTTP请求，则只需要先在系统中设置代理服务器。Mac OS的设置方式如下图所示。<br><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20220109174045444.png" alt="image-20220109174045444"></p><p>若要抓取HTTPS请求，需要先下载并安装对应的证书，具体可参考Postman<a href="https://learning.postman.com/docs/sending-requests/capturing-request-data/capturing-https-traffic/">官方文档</a>。</p><p>然后在postman中点击开始，然后在浏览器中操作页面，就能看到对应的请求保存下来了。</p><p><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20220109173948359.png" alt="image-20220109173948359"></p>]]></content>
      
      
      <categories>
          
          <category> 接口测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Postman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口自动化测试：Python+Pytest+Requests+Allure</title>
      <link href="/2022/01/20/jie-kou-ce-shi-zi-dong-hua-python/"/>
      <url>/2022/01/20/jie-kou-ce-shi-zi-dong-hua-python/</url>
      
        <content type="html"><![CDATA[<p>本项目实现了对<a href="https://yuxiaomeng.blog.csdn.net/article/details/122485315">Daily Cost</a>的接口测试：</p><ul><li><strong>Python+Requests</strong> 发送和处理HTTP协议的请求接口</li><li> <strong>Pytest</strong> 作为测试执行器</li><li> <strong>YAML</strong> 管理测试数据</li><li> <strong>Allure</strong> 来生成测试报告。</li></ul><p>本项目是参考了<a href="https://github.com/wintests/pytestDemo">pytestDemo</a>做了自己的实现。</p><h2 id="1-项目结构及安装部署"><a href="#1-项目结构及安装部署" class="headerlink" title="1. 项目结构及安装部署"></a>1. 项目结构及安装部署</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><ul><li><strong>api</strong>:  接口封装层，如封装HTTP接口为Python接口</li><li><strong>commom</strong>:  从文件中读取数据等各种工具类</li><li><strong>core</strong>:  requests 请求方法封装、关键字返回结果类</li><li><strong>config</strong>:  环境、数据库连接等配置</li><li><strong>data</strong>:  测试数据文件管理</li><li><strong>operation</strong>: 关键字封装层，如把多个Python接口封装为关键字</li><li><strong>pytest.ini</strong>:  pytest 配置文件</li><li><strong>requirements.txt</strong>:  相关依赖包文件</li><li><strong>testcases</strong>:  测试用例<ul><li><strong>api_test</strong>:  单接口测试</li><li><strong>scenario_test</strong>:  场景/业务流程测试</li></ul></li></ul><h3 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h3><ul><li>部署Daily Cost应用：教程</li><li>下载本测试项目<a href="https://github.com/yu-xiaomeng/automation-test-for-dailycost/tree/main/apitest-python-pytest-requests">源代码</a> ，通过pip安装相应依赖<code>pip3 install -r requirements.txt</code>，根据实际情况修改setting.ini中的相应内容</li><li>输入<code>pytest</code>运行测试</li><li>如果想要使用Allure查看生成的测试报告，需要先安装Allure服务：<code>brew install allure</code></li></ul><h2 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2. 环境配置"></a>2. 环境配置</h2><ul><li>在config-setting.ini文件中定义<code>api_root_url</code></li><li>在common-read_data.py中实现load_ini()方法读取配置文件</li><li>在需要使用<code>api_root_url</code>的地方调用<code>load_ini(data_file_path)</code>，读取对应的value</li></ul><h2 id="3-封装HTTP请求"><a href="#3-封装HTTP请求" class="headerlink" title="3. 封装HTTP请求"></a>3. 封装HTTP请求</h2><ol><li><p>封装requests请求方法：将<strong>requests</strong>中发送GET、POST、PUT、DELETE等方法封装到<strong>RestClient</strong>类中</p></li><li><p>定义被测API接口Request：在<strong>api</strong>文件夹中根据domain创建对应请求的集合类，如<code>class User(RestClient)</code>，并定义各接口信息，如登录接口：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> self<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="4-关键字封装"><a href="#4-关键字封装" class="headerlink" title="4. 关键字封装"></a>4. 关键字封装</h2><p>关键字应当是具有一定业务意义的。在封装关键字的时候，可以只封装一个接口，也可以调用多个接口来完成。</p><p>比如我们要测试<strong>记一笔</strong>，在接口调用成功后接口只会返回账单的ID，还需要调用查询账单明细接口，来帮助判断每个字段是否与输入时的一致，那么我们可以这样来进行测试：</p><ul><li>首先，将<code>记一笔-查看明细</code>的操作封装为一个关键字，在这个关键字中依次调用记一笔和查询账单明细结果，并可以自定义关键字的返回结果</li><li>接着，在编写测试用例的时候，直接调用关键字来进行测试，这时就可以关键字的返回结果，断言的时候，也可以直接对关键字返回结果进行断言</li></ul><p>再比如<strong>查询月度账单统计结果</strong>，一个接口就可以独立完成业务查询操作，我们在关键字中只调用这一个接口即可。</p><p>回到本项目，具体的代码逻辑如下：</p><ol><li><p>在operation文件夹中，还是按照domain分文件来组织各关键字</p></li><li><p>在core中定义关键字返回的数据结构类 <code>ResultBase</code></p></li><li><p>定义关键字，在调用对应API请求时需要明确传递接口请求参数，并定义返回结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bill_monthly_stat</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">:</span>        header <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>        <span class="token string">"Authorization"</span><span class="token punctuation">:</span> <span class="token string">"Bearer "</span> <span class="token operator">+</span> token    <span class="token punctuation">&#125;</span>    param <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"date"</span><span class="token punctuation">:</span> date<span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> bill_details<span class="token punctuation">.</span>get_bill_monthly<span class="token punctuation">(</span>params<span class="token operator">=</span>param<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span>    <span class="token keyword">return</span> ResultBase<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本项目中的关键字中都只封装了一个请求。</p></li></ol><h2 id="4-单接口测试"><a href="#4-单接口测试" class="headerlink" title="4. 单接口测试"></a>4. 单接口测试</h2><p>以<code>记一笔</code>接口为例。</p><ul><li>定义接口及关键字</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span> api <span class="token operator">-</span><span class="token operator">></span> bill<span class="token punctuation">.</span>py <span class="token punctuation">:</span> 定义接口<span class="token keyword">def</span> <span class="token function">create_new_bill</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/bill"</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token operator">//</span> operation <span class="token operator">-</span><span class="token operator">></span> bill<span class="token punctuation">.</span>py <span class="token punctuation">:</span> 定义关键字<span class="token keyword">def</span> <span class="token function">bill_create</span><span class="token punctuation">(</span>category_id<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">,</span> amount<span class="token punctuation">,</span> note<span class="token punctuation">,</span> date<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"categoryId"</span><span class="token punctuation">:</span> category_id<span class="token punctuation">,</span>        <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">,</span>        <span class="token string">"amount"</span><span class="token punctuation">:</span> amount<span class="token punctuation">,</span>        <span class="token string">"note"</span><span class="token punctuation">:</span> note<span class="token punctuation">,</span>        <span class="token string">"date"</span><span class="token punctuation">:</span> date    <span class="token punctuation">&#125;</span>    header <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>        <span class="token string">"Authorization"</span><span class="token punctuation">:</span> <span class="token string">"Bearer "</span> <span class="token operator">+</span> token    <span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> bill<span class="token punctuation">.</span>create_new_bill<span class="token punctuation">(</span>json<span class="token operator">=</span>payload<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span>        <span class="token keyword">return</span> ResultBase<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>接口测试类</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span> testcases <span class="token operator">-</span><span class="token operator">></span> api_test <span class="token operator">-</span><span class="token operator">></span> bill <span class="token operator">-</span><span class="token operator">></span> test_bill_create<span class="token punctuation">.</span>py<span class="token keyword">class</span> <span class="token class-name">TestBillCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@mark<span class="token punctuation">.</span>smoke</span>    <span class="token decorator annotation punctuation">@mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">'category_id, type, amount, note, date, status_code, message'</span><span class="token punctuation">,</span>                     <span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token string">"5442d3b8-9d4a-4654-bf0b-d2249efef190"</span><span class="token punctuation">,</span> <span class="token string">"EXPENSE"</span><span class="token punctuation">,</span> <span class="token number">100.01</span><span class="token punctuation">,</span> <span class="token string">"note1111test"</span><span class="token punctuation">,</span> <span class="token string">"2021-12-01"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"操作成功"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"66c22fad-be9d-481d-a445-c57d266bf938"</span><span class="token punctuation">,</span> <span class="token string">"INCOME"</span><span class="token punctuation">,</span> <span class="token number">1000.01</span><span class="token punctuation">,</span> <span class="token string">"note1111test"</span><span class="token punctuation">,</span> <span class="token string">"2021-12-01"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"操作成功"</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_bill_create_success</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> category_id<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">,</span> amount<span class="token punctuation">,</span> note<span class="token punctuation">,</span> date<span class="token punctuation">,</span> status_code<span class="token punctuation">,</span> message<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> bill_create<span class="token punctuation">(</span>category_id<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">,</span> amount<span class="token punctuation">,</span> note<span class="token punctuation">,</span> date<span class="token punctuation">,</span> token<span class="token punctuation">)</span>        <span class="token keyword">assert</span> result<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> status_code        <span class="token keyword">assert</span> result<span class="token punctuation">.</span>message <span class="token operator">==</span> message        <span class="token keyword">assert</span> result<span class="token punctuation">.</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>@mark.smoke</code>是使用了pytest的mark标记功能，运行时使用命令<code>pytest -m smoke</code>只运行标记为smoke的用例</li><li><code>@mark.parametrize</code>是pytest的变量参数化功能，可以实现数据驱动测试，如上所示有两条参数化数据，则该用例会应用这两条数据共执行两次</li><li>调用bill_create时有一个<code>token</code>参数，它实际上是在<code>conftest.py</code>文件中定义的</li><li>pytest中的assert使用的是python内置的断言库</li></ul></li></ul><h2 id="5-YAML文件管理测试数据"><a href="#5-YAML文件管理测试数据" class="headerlink" title="5. YAML文件管理测试数据"></a>5. YAML文件管理测试数据</h2><p>在上面的例子中我们在使用<code>@mark.parametrize</code>时直接将具体的测试数据写在了用例上方。为了后期修改维护效率更高，我们通常会将测试数据和用例分离，即可以采用yaml文件来单独管理测试数据，conftest.py可以帮助数据的读取。</p><ul><li><p>定义yaml文件：data -&gt; api_test_data.yml </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">test_bill_create_success</span><span class="token punctuation">:</span>  <span class="token comment"># category_id, type, amount, note, date, status_code, message</span>  <span class="token punctuation">-</span> <span class="token punctuation">[</span><span class="token string">"5442d3b8-9d4a-4654-bf0b-d2249efef190"</span><span class="token punctuation">,</span> <span class="token string">"EXPENSE"</span><span class="token punctuation">,</span> <span class="token number">100.01</span><span class="token punctuation">,</span> <span class="token string">"note1111test"</span><span class="token punctuation">,</span> <span class="token string">"2021-12-01"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"操作成功"</span><span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token punctuation">[</span><span class="token string">"66c22fad-be9d-481d-a445-c57d266bf938"</span><span class="token punctuation">,</span> <span class="token string">"INCOME"</span><span class="token punctuation">,</span> <span class="token number">1000.01</span><span class="token punctuation">,</span> <span class="token string">"note1111test"</span><span class="token punctuation">,</span> <span class="token string">"2021-12-01"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"操作成功"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>key</code>为测试用例对应的函数名<code>test_bill_create_success</code></li><li> <code>-</code>表示value是数组</li></ul></li><li><p><code>conftest.py</code>中读取对应的测试数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token keyword">import</span> os<span class="token keyword">from</span> common<span class="token punctuation">.</span>read_data <span class="token keyword">import</span> data BASE_PATH <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span>yaml_file_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        data_file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_PATH<span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">,</span> yaml_file_name<span class="token punctuation">)</span>        yaml_data <span class="token operator">=</span> data<span class="token punctuation">.</span>load_yaml<span class="token punctuation">(</span>data_file_path<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> ex<span class="token punctuation">:</span>        pytest<span class="token punctuation">.</span>skip<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> yaml_dataapi_data <span class="token operator">=</span> get_data<span class="token punctuation">(</span><span class="token string">"api_test_data.yml"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>参数化时从yaml文件中读取数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">'category_id, type, amount, note, date, status_code, message'</span><span class="token punctuation">,</span>                     api_data<span class="token punctuation">[</span><span class="token string">"test_bill_create_success"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="6-API场景测试"><a href="#6-API场景测试" class="headerlink" title="6. API场景测试"></a>6. API场景测试</h2><p>在做API测试时，除了单个接口输入输出的校验，由多个接口串联成的业务场景的测试也是必不可少的。</p><p>简单的，我们以登录后进入首页为例，接口调用为：登录 -&gt; 查询当月账单明细列表 -&gt; 查询当月账单统计值。</p><ul><li><p>定义场景测试类</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span> testcases <span class="token operator">-</span><span class="token operator">></span> scenario_test <span class="token operator">-</span><span class="token operator">></span> test_get_one_month_bill<span class="token punctuation">.</span>py<span class="token keyword">import</span> allure<span class="token keyword">import</span> pytest<span class="token keyword">from</span> operation<span class="token punctuation">.</span>user <span class="token keyword">import</span> login_user<span class="token keyword">from</span> operation<span class="token punctuation">.</span>bill <span class="token keyword">import</span> one_month_bill_list_get_by_date<span class="token punctuation">,</span> bill_monthly_stat<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>core</span><span class="token keyword">class</span> <span class="token class-name">TestGetOneMonthBill</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>title</span><span class="token punctuation">(</span><span class="token string">"01: user[yuxiaomeng] login"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>story</span><span class="token punctuation">(</span><span class="token string">'story_1'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_user_login</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> core_env<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> login_user<span class="token punctuation">(</span><span class="token string">'yuxiaomeng'</span><span class="token punctuation">,</span> <span class="token string">'20211030.y'</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> result<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span>        <span class="token keyword">assert</span> result<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token string">"token"</span><span class="token punctuation">]</span>        core_env<span class="token punctuation">[</span><span class="token string">"token"</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token string">"token"</span><span class="token punctuation">]</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>title</span><span class="token punctuation">(</span><span class="token string">"02: get homepage info - bill details list"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>story</span><span class="token punctuation">(</span><span class="token string">'story_1'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_get_current_month_monthly_bill_list</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> core_env<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> one_month_bill_list_get_by_date<span class="token punctuation">(</span>core_env<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> core_env<span class="token punctuation">[</span><span class="token string">"token"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> result<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span>        <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span>        <span class="token keyword">assert</span> result<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"2021-11-11"</span>        <span class="token keyword">assert</span> result<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"expense"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">510.5</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>title</span><span class="token punctuation">(</span><span class="token string">"03: get homepage info - bill monthly statistics "</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>story</span><span class="token punctuation">(</span><span class="token string">'story_1'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_get_current_month_bill</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> core_env<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> bill_monthly_stat<span class="token punctuation">(</span>core_env<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> core_env<span class="token punctuation">[</span><span class="token string">"token"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> result<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span>        <span class="token keyword">assert</span> result<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token string">"expense"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>其中<code>core_env</code>用于在接口间传递测试数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span> testcases <span class="token operator">-</span><span class="token operator">></span> scenario_test <span class="token operator">-</span><span class="token operator">></span> conftest<span class="token punctuation">.</span>py<span class="token keyword">import</span> pytest<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">'session'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">core_env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"date"</span><span class="token punctuation">:</span> <span class="token string">"2021-11"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="7-Allure生成测试报告"><a href="#7-Allure生成测试报告" class="headerlink" title="7. Allure生成测试报告"></a>7. Allure生成测试报告</h2><p>allure-pytest的详细使用方法可以参考<a href="https://docs.qameta.io/allure-report/frameworks/python/pytest">官方文档</a>。在这里只做简单介绍。</p><ul><li>运行测试时加上–alluredir参数可以生存报告到指定的文件夹:<code> pytest --alluredir=/tmp/my_allure_results</code></li><li>运行完后查看报告：<code>allure serve /tmp/my_allure_results</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 接口测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API TEST </tag>
            
            <tag> Python </tag>
            
            <tag> Pytest </tag>
            
            <tag> Allure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Daily Cost 介绍</title>
      <link href="/2022/01/13/daily-cost-jie-shao/"/>
      <url>/2022/01/13/daily-cost-jie-shao/</url>
      
        <content type="html"><![CDATA[<p><strong>Daily Cost</strong>是我为了学习前后端开发的产出成果。从应用名可以看出是一个记账本应用，主要参考了<a href="https://www.shayujizhang.com/">鲨鱼记账</a>，我从中挑选了一部分核心功能来自己开发实现。</p><h2 id="1-功能模块"><a href="#1-功能模块" class="headerlink" title="1. 功能模块"></a>1. 功能模块</h2><p>作为一个正经的记账本应用，肯定要能满足用户的基本记账需求，因此Daily Cost 实现了以下功能：</p><ol><li>用户注册和登录</li><li>用户可管理自己的记账类别</li><li>用户可新增、查看、编辑、删除一笔账单</li><li>用户可按月、按年查看总的收支数据</li></ol><p><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20220113165520167.png" alt="image-20220113165520167"></p><p>说明：由于我水平和精力有限，部分功能未完全开发完成，具体如下所示。灰掉的部分功能后端接口已开发完成，但前端UI未完全开发完成，后续开发完成后会更新下图，大家也可在<a href="https://trello.com/b/AYAxICxo/%E8%AE%B0%E8%B4%A6%E6%9C%AC-daily-cost">记账本-Daily Cost</a>中查看最新进度。</p><div  align="center"><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20220113175321025.png" alt="image-20220113175321025" style="zoom: 33%;" /></div><h2 id="2-技术栈"><a href="#2-技术栈" class="headerlink" title="2. 技术栈"></a>2. 技术栈</h2><p>2.1  前端主要依赖模块</p><ul><li><a href="https://reactjs.org/">react</a>(前端框架，daily cost使用<a href="https://create-react-app.dev/">create-react-app</a>创建)</li><li><a href="https://github.com/remix-run/react-router/blob/main/docs/getting-started/tutorial.md">react-router-dom</a>(路由控制)</li><li><a href="https://ant.design/index-cn">antd</a>(蚂蚁金服开源的 react ui 组件框架)</li><li><a href="https://mobile.ant.design/zh">antd-mobile</a>(antd的移动端组件框架)</li><li><a href="https://github.com/mzabriskie/axios">axios</a>(http请求模块)</li></ul><p>2.2 后端</p><ul><li><a href="https://spring.io/projects/spring-boot">Spring Boot 2</a></li><li><a href="https://spring.io/projects/spring-security">Spring Security</a>(身份验证和访问控制)</li><li><a href="https://maven.apache.org/">maven</a>(项目构建)</li><li><a href="https://swagger.io/">Swagger 3</a>(接口文档)</li><li><a href="https://flywaydb.org/">Flyway</a>(数据库版本控制工具)</li><li><a href="https://www.mysql.com/">MySQL</a>(数据库)</li><li><a href="https://www.nginx.com/">Nginx</a>(解决请求跨域问题)</li></ul><h2 id="3-安装和运行"><a href="#3-安装和运行" class="headerlink" title="3. 安装和运行"></a>3. 安装和运行</h2><p>3.1 前端</p><ol><li><p>下载或克隆<a href="https://github.com/yu-xiaomeng/dailycost-front">项目前端源码</a></p></li><li><p><code>npm install </code> 安装依赖</p></li><li><p><code>npm start</code> 启动项目</p></li></ol><p>3.2 后端</p><ol><li>下载并安装<a href="https://www.java.com/zh-CN/download/">Java</a>、<a href="https://www.mysql.com/">MySQL</a>、<a href="https://www.jetbrains.com/idea/download/">Intellij IDEA</a></li><li>下载或克隆<a href="https://github.com/yu-xiaomeng/dailycost">项目后端源码</a></li><li>在IDEA中打开项目，等待maven下载所有依赖</li><li>在application.properties中修改MySQL数据库配置（连接url、用户名、密码）</li><li><code>./mvnw spring-boot:run</code>构建并运行daily cost应用</li><li>应用在8081端口运行成功：<ol><li>可在浏览器中输入<code>http://localhost:8081/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config#/</code>查看和调试接口</li><li>检查MySQL数据库，数据表及数据初始化成功</li></ol></li></ol><p>3.3 Nginx</p><ol><li><p>安装Nginx</p></li><li><p>修改Nginx的配置文件nginx.conf，Mac OS该文件目录为<code>/usr/local/etc/nginx/nginx.conf</code></p><pre class="line-numbers language-none"><code class="language-none">server &#123;listen       8080;server_name  localhost;# 以下为需要新增的内容location &#x2F;api&#x2F; &#123;proxy_pass http:&#x2F;&#x2F;127.0.0.1:8081&#x2F;;&#125;location &#x2F; &#123;proxy_pass http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;;&#125;# 新增结束# 原本的内容无需更改&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>nginx -s reload</code>重新启动Nginx</p></li></ol><p>3.4 访问页面</p><p>​    在浏览器中输入<a href="http://localhost:8080/%EF%BC%8C%E8%83%BD%E5%A4%9F%E7%9C%8B%E5%88%B0%E4%BB%A5%E4%B8%8B%E9%A1%B5%E9%9D%A2%E5%88%99%E8%AF%81%E6%98%8E%E8%BF%90%E8%A1%8C%E6%88%90%E5%8A%9F%E3%80%82%E4%B8%8B%E5%9B%BE%E4%B8%AD%E6%88%91%E6%89%93%E5%BC%80%E4%BA%86%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%B9%B6%E5%B0%86%E5%A4%A7%E5%B0%8F%E8%AE%BE%E4%B8%BA375%E2%9C%96%EF%B8%8F">http://localhost:8080/，能够看到以下页面则证明运行成功。下图中我打开了移动端模式，并将大小设为375✖️</a> 812的最佳使用大小。</p><div  align="center"><img src="https://xmzines.oss-cn-shenzhen.aliyuncs.com/img/image-20220113230947432.png" alt="image-20220113230947432" style="zoom:30%;" /></div>]]></content>
      
      
      <categories>
          
          <category> Daily Cost </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily Cost </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
